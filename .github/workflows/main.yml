name: Authier monorepo CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    name: runs typescript and tests
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: authier
          POSTGRES_PASSWORD: auth133r
          POSTGRES_USER: authier
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --user root
    env:
      APPNAME: authier-api
      DATABASE_URL: postgresql://authier:auth133r@localhost:5432/authier

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          # cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            webExtension:
              - 'web-extension/**'
            mobileApp:
              - 'mobile-app/**'

      - name: backend install deps, check TS and run jest
        working-directory: ./backend
        if: steps.changes.outputs.backend == 'true'
        run: |
          pnpm gen
          pnpm tsc
          cp .env.sample .env
          pnpm test:prepare
          pnpm test

      - name: web-extension, check TS and run jest
        working-directory: ./web-extension
        if: steps.changes.outputs.webExtension == 'true' || steps.changes.outputs.backend == 'true'
        run: |
          pnpm tsc
          pnpm test

      - name: mobile-app, check TS and run jest
        working-directory: ./mobile-app
        if: steps.changes.outputs.mobileApp == 'true'
        run: |
          pnpm tsc
          pnpm test

      - name: backend build and deploy
        working-directory: ./backend
        if: steps.changes.outputs.backend == 'true'
        run: |
          pnpm migrate
          pnpm cdkDeploy
