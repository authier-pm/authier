type Query {
  user(userId: String!): UserQuery

  """
  you need to be authenticated to call this resolver
  """
  authenticated: Boolean!
  me: UserQuery

  """
  returns a decryption challenge
  """
  deviceDecryptionChallenge(email: EmailAddress!): [String!]!
  webInputs(url: String!): [WebInput!]!
}

type UserQuery {
  id: String!
  email: EmailAddress
  tokenVersion: Int!
  username: String
  addDeviceSecretEncrypted: String!
  createdAt: DateTime!
  updatedAt: DateTime
  masterDeviceId: String
  TOTPlimit: Int!
  loginCredentialsLimit: Int!
  myDevices: [Device!]!
  devicesCount: Int!
  settings: SettingsConfig!
  encryptedSecrets: [EncryptedSecretQuery!]!
  sendAuthMessage(
    pageName: String!
    device: String!
    time: String!
    location: String!
  ): Boolean!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Device {
  id: String!
  firstIpAddress: String!
  lastIpAddress: String!
  firebaseToken: String!
  name: String!
  syncTOTP: Boolean!
  ipAddressLock: Boolean!
  vaultLockTimeoutSeconds: Int
  createdAt: DateTime!
  updatedAt: DateTime
  registeredWithMasterAt: DateTime
  lastSyncAt: DateTime
  masterPasswordOutdatedAt: DateTime
  userId: String!
}

type SettingsConfig {
  userId: String!
  lockTime: Int!
  twoFA: Boolean!
  noHandsLogin: Boolean!
  homeUI: String!
  updatedAt: DateTime
}

type EncryptedSecretQuery {
  id: Int!
  encrypted: String!
  version: Int!
  userId: String!
  kind: EncryptedSecretType!
  createdAt: DateTime!
  updatedAt: DateTime
  url: String
  androidUri: String
  iosUri: String
  lastUsageEventId: BigInt
  iconUrl: String
  label: String!
}

enum EncryptedSecretType {
  TOTP
  LOGIN_CREDENTIALS
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type WebInput {
  id: Int!
  layoutType: String
  createdAt: DateTime!
  url: String!
  kind: WebInputType!
  domPath: String!
  addedByUserId: String!
}

enum WebInputType {
  TOTP
  USERNAME
  EMAIL
  USERNAME_OR_EMAIL
  PASSWORD
}

type Mutation {
  user(userId: String!): UserMutation

  """
  you need to be authenticated to call this resolver
  """
  me: UserMutation
  registerNewUser(userId: UUID!, input: RegisterNewDeviceInput!): LoginResponse!
  addNewDeviceForUser(
    currentAddDeviceSecret: String!
    input: RegisterNewDeviceInput!
  ): LoginResponse!

  """
  removes current device
  """
  logout: Boolean
  addWebInputs(webInputs: [WebInputElement!]!): [WebInput!]!
}

type UserMutation {
  id: String!
  email: EmailAddress
  tokenVersion: Int!
  username: String
  addDeviceSecretEncrypted: String!
  createdAt: DateTime!
  updatedAt: DateTime
  masterDeviceId: String
  TOTPlimit: Int!
  loginCredentialsLimit: Int!
  addDevice(firebaseToken: String!, deviceId: String!, name: String!): Device!
  addEncryptedSecret(payload: EncryptedSecretInput!): EncryptedSecretQuery!
  updateFireToken(firebaseToken: String!): Device!
  updateSettings(
    noHandsLogin: Boolean!
    lockTime: Int!
    homeUI: String!
    twoFA: Boolean!
  ): SettingsConfig!
  revokeRefreshTokensForUser: User!
  approveDevice(success: Boolean!): Boolean!
}

input EncryptedSecretInput {
  kind: EncryptedSecretType!
  url: String
  iosUri: String
  androidUri: String
  label: String!
  encrypted: String!
}

type User {
  id: String!
  email: String
  tokenVersion: Int!
  username: String
  addDeviceSecretEncrypted: String!
  createdAt: DateTime!
  updatedAt: DateTime
  masterDeviceId: String
  TOTPlimit: Int!
  loginCredentialsLimit: Int!
}

type LoginResponse {
  accessToken: String!
  user: UserAfterAuth!
}

type UserAfterAuth {
  id: String!
  email: String
  tokenVersion: Int!
  username: String
  addDeviceSecretEncrypted: String!
  createdAt: DateTime!
  updatedAt: DateTime
  masterDeviceId: String
  TOTPlimit: Int!
  loginCredentialsLimit: Int!
  EncryptedSecrets: [EncryptedSecret!]
}

type EncryptedSecret {
  id: Int!
  encrypted: String!
  version: Int!
  userId: String!
  kind: EncryptedSecretType!
  createdAt: DateTime!
  updatedAt: DateTime
  url: String
  androidUri: String
  iosUri: String
  lastUsageEventId: BigInt
  iconUrl: String
  label: String!
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input RegisterNewDeviceInput {
  email: EmailAddress!
  deviceName: String!
  deviceId: String!
  firebaseToken: String!
  addDeviceSecret: String!
  addDeviceSecretEncrypted: String!
}

input WebInputElement {
  domPath: String!
  url: String!
  kind: WebInputType!
}
