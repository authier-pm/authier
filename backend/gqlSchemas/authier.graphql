type Query {
  osTime: String!

  """
  you need to be authenticated to call this resolver
  """
  authenticated: Boolean!
  me: UserQuery!
  currentDevice: DeviceQuery!
  webInputs(
    """
    accepts strings like example.com and similar
    """
    hosts: [String!]
  ): [WebInputGQLScalars!]!
}

type UserQuery {
  id: ID!
  email: EmailAddress
  tokenVersion: Int!
  username: String
  addDeviceSecretEncrypted: String!
  createdAt: DateTime!
  updatedAt: DateTime
  masterDeviceId: String
  uiLanguage: String!
  TOTPlimit: Int!
  loginCredentialsLimit: Int!
  deviceRecoveryCooldownMinutes: Int!
  notificationOnVaultUnlock: Boolean!
  notificationOnWrongPasswordAttempts: Int!
  Token: [TokenGQL!]!
  masterDevice: DeviceGQL
  recoveryDecryptionChallenge: DecryptionChallengeGQL
  UsageEvents: [SecretUsageEventGQL!]!
  EncryptedSecrets: [EncryptedSecretGQL!]!
  Devices: [DeviceGQL!]!
  WebInputsAdded: [WebInputGQL!]!
  Tags: [TagGQL!]!
  UserPaidProducts: [UserPaidProductsGQL!]!
  DecryptionChallenges: [DecryptionChallengeGQL!]!
  MasterDeviceChange: [MasterDeviceChangeGQL!]!
  DefaultDeviceSettings: DefaultDeviceSettingsGQL
  devices: [DeviceQuery!]!
  defaultDeviceSettings: DefaultDeviceSettingsQuery!
  device(id: String!): DeviceQuery!
  lastChangeInSecrets: DateTime
  devicesCount: Int!
  primaryEmailVerification: EmailVerificationGQLScalars
  emailVerifications: [EmailVerificationGQLScalars!]!
  encryptedSecrets: [EncryptedSecretQuery!]!
  decryptionChallengesWaiting: [DecryptionChallengeForApproval!]!
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress
  @specifiedBy(
    url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address"
  )

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type TokenGQL {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  type: TokenType!
  emailToken: String
  valid: Boolean!
  expiration: DateTime!
  userId: String!
  user: UserGQL!
}

enum TokenType {
  EMAIL
  API
}

type UserGQL {
  id: ID!
  email: String
  tokenVersion: Int!
  username: String
  addDeviceSecretEncrypted: String!
  createdAt: DateTime!
  updatedAt: DateTime
  masterDeviceId: String
  uiLanguage: String!
  TOTPlimit: Int!
  loginCredentialsLimit: Int!
  deviceRecoveryCooldownMinutes: Int!
  notificationOnVaultUnlock: Boolean!
  notificationOnWrongPasswordAttempts: Int!
  Token: [TokenGQL!]!
  masterDevice: DeviceGQL
  recoveryDecryptionChallenge: DecryptionChallengeGQL
  UsageEvents: [SecretUsageEventGQL!]!
  EncryptedSecrets: [EncryptedSecretGQL!]!
  Devices: [DeviceGQL!]!
  WebInputsAdded: [WebInputGQL!]!
  Tags: [TagGQL!]!
  UserPaidProducts: [UserPaidProductsGQL!]!
  DecryptionChallenges: [DecryptionChallengeGQL!]!
  MasterDeviceChange: [MasterDeviceChangeGQL!]!
  DefaultDeviceSettings: DefaultDeviceSettingsGQL
}

type DeviceGQL {
  id: ID!
  firstIpAddress: String!
  lastIpAddress: String!
  firebaseToken: String
  name: String!
  platform: String!
  ipAddressLock: Boolean!
  logoutAt: DateTime
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  registeredWithMasterAt: DateTime
  lastSyncAt: DateTime
  lastUnlockAt: DateTime
  lastLockAt: DateTime
  masterPasswordOutdatedAt: DateTime
  userId: String!
  User: UserGQL!
  UserMaster: UserGQL
  SecretUsageEvents: [SecretUsageEventGQL!]!
  DeviceDecryptionChallengesApproved: [DecryptionChallengeGQL!]!
}

type SecretUsageEventGQL {
  id: BigInt!
  kind: String!
  timestamp: DateTime!
  secretId: String!
  url: String
  userId: String!
  deviceId: String!
  webInputId: Int
  Secret: EncryptedSecretGQL!
  User: UserGQL!
  Device: DeviceGQL!
  WebOTPInput: WebInputGQL
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type EncryptedSecretGQL {
  id: ID!
  encrypted: String!
  version: Int!
  kind: EncryptedSecretType!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
  user: UserGQL!
  SecretUsageEvent: [SecretUsageEventGQL!]!
}

enum EncryptedSecretType {
  TOTP
  LOGIN_CREDENTIALS
}

type WebInputGQL {
  id: Int!
  layoutType: String
  createdAt: DateTime!
  host: String!
  url: String!
  kind: WebInputType!
  domPath: String!
  domOrdinal: Int!
  addedByUserId: String
  addedByUser: UserGQL
  UsageEvents: [SecretUsageEventGQL!]!
}

enum WebInputType {
  TOTP
  USERNAME
  EMAIL
  USERNAME_OR_EMAIL
  PASSWORD
  NEW_PASSWORD
  NEW_PASSWORD_CONFIRMATION
  SUBMIT_BUTTON
  CUSTOM
}

type DecryptionChallengeGQL {
  id: Int!
  ipAddress: String!
  approvedAt: DateTime
  rejectedAt: DateTime
  blockIp: Boolean
  deviceName: String!
  deviceId: String!
  userId: String!
  createdAt: DateTime!
  approvedByRecovery: Boolean!
  approvedFromDeviceId: String
  user: UserGQL!
  approvedFromDevice: DeviceGQL
  User: [UserGQL!]!
}

type TagGQL {
  id: Int!
  name: String!
  createdAt: DateTime!
  userId: String!
  user: UserGQL!
}

type UserPaidProductsGQL {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  expiresAt: DateTime
  productId: String!
  userId: String!
  checkoutSessionId: String!
  user: UserGQL!
}

type MasterDeviceChangeGQL {
  id: ID!
  createdAt: DateTime!
  processAt: DateTime!
  oldDeviceId: String!
  newDeviceId: String!
  userId: String!
  user: UserGQL!
}

type DefaultDeviceSettingsGQL {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  theme: String!
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  userId: String!
  user: UserGQL!
}

type DeviceQuery {
  id: ID!
  firstIpAddress: String!
  lastIpAddress: String!
  firebaseToken: String
  name: String!
  platform: String!
  ipAddressLock: Boolean!
  logoutAt: DateTime
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  registeredWithMasterAt: DateTime
  lastSyncAt: DateTime
  lastUnlockAt: DateTime
  lastLockAt: DateTime
  masterPasswordOutdatedAt: DateTime
  userId: String!
  User: UserGQL!
  UserMaster: UserGQL
  SecretUsageEvents: [SecretUsageEventGQL!]!
  DeviceDecryptionChallengesApproved: [DecryptionChallengeGQL!]!

  """
  Get all secrets that were change since last device sync
  """
  encryptedSecretsToSync: [EncryptedSecretQuery!]!
  lastGeoLocation: String!
}

type EncryptedSecretQuery {
  id: ID!
  encrypted: String!
  version: Int!
  kind: EncryptedSecretType!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
  user: UserGQL!
  SecretUsageEvent: [SecretUsageEventGQL!]!
  lastUsedAt: DateTime
}

type DefaultDeviceSettingsQuery {
  """
  0 index for system defaults
  """
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  theme: String!
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  userId: String!
}

type EmailVerificationGQLScalars {
  address: ID!
  createdAt: DateTime!
  verifiedAt: DateTime
  userId: String!
  kind: EmailVerificationType!
}

enum EmailVerificationType {
  PRIMARY
  CONTACT
}

type DecryptionChallengeForApproval {
  ipGeoLocation: JSON
  deviceLocationFromIp: DeviceLocation
  id: Int!
  ipAddress: String!
  rejectedAt: DateTime
  createdAt: DateTime!
  deviceName: String!
  deviceId: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type DeviceLocation {
  city: String!
  countryName: String!
}

type WebInputGQLScalars {
  id: Int!
  layoutType: String
  createdAt: DateTime!
  host: String!
  url: String!
  kind: WebInputType!
  domPath: String!
  domOrdinal: Int!
  addedByUserId: String
}

type Mutation {
  """
  you need to be authenticated to call this resolver
  """
  me: UserMutation!
  currentDevice: DeviceMutation!
  registerNewUser(
    userId: UUID!
    input: RegisterNewAccountInput!
  ): LoginResponse!

  """
  returns a decryption challenge, used when logging in
  """
  deviceDecryptionChallenge(
    deviceInput: DeviceInput!
    email: EmailAddress!
  ): DecryptionChallenge

  """
  removes current device. Returns null if user is not authenticated, alias for device logout/remove methods
  """
  logout(removeDevice: Boolean): Int
    @deprecated(reason: "prefer device methods")
  addWebInputs(webInputs: [WebInputElement!]!): [WebInputGQL!]!
}

type UserMutation {
  id: ID!
  email: EmailAddress
  tokenVersion: Int!
  username: String
  addDeviceSecretEncrypted: String!
  createdAt: DateTime!
  updatedAt: DateTime
  masterDeviceId: String
  uiLanguage: String!
  TOTPlimit: Int!
  loginCredentialsLimit: Int!
  deviceRecoveryCooldownMinutes: Int!
  notificationOnVaultUnlock: Boolean!
  notificationOnWrongPasswordAttempts: Int!
  Token: [TokenGQL!]!
  masterDevice: DeviceGQL
  recoveryDecryptionChallenge: DecryptionChallengeGQL
  UsageEvents: [SecretUsageEventGQL!]!
  EncryptedSecrets: [EncryptedSecretGQL!]!
  Devices: [DeviceGQL!]!
  WebInputsAdded: [WebInputGQL!]!
  Tags: [TagGQL!]!
  UserPaidProducts: [UserPaidProductsGQL!]!
  DecryptionChallenges: [DecryptionChallengeGQL!]!
  MasterDeviceChange: [MasterDeviceChangeGQL!]!
  DefaultDeviceSettings: DefaultDeviceSettingsGQL
  addCookie: String!
  device(id: String!): DeviceMutation!
  defaultDeviceSettings: DefaultDeviceSettingsMutation!
  addDevice(firebaseToken: String!, device: DeviceInput!): DeviceGQL!
  encryptedSecret(id: ID!): EncryptedSecretMutation!
  createSecretUsageEvent(
    event: SecretUsageEventInput!
  ): SecretUsageEventGQLScalars!
  removeEncryptedSecrets(secrets: [UUID!]!): [EncryptedSecretMutation!]!
  addEncryptedSecrets(
    secrets: [EncryptedSecretInput!]!
  ): [EncryptedSecretQuery!]!
  updateFireToken(firebaseToken: String!): DeviceGQL!
  updateSettings(config: SettingsInput!): UserGQL!
  sendEmailVerification(isMobile: Boolean): NonNegativeInt!
  revokeRefreshTokensForUser: UserGQL!
  changeMasterPassword(input: ChangeMasterPasswordInput!): Int!
  changeEmail(email: EmailAddress!): UserQuery!
  decryptionChallenge(id: Int!): DecryptionChallengeMutation!
  setMasterDevice(newMasterDeviceId: String!): MasterDeviceChangeGQL!
  createPortalSession: String!
  createCheckoutSession(product: String!): String!
  delete: UserGQL!
}

type DeviceMutation {
  id: ID!
  firstIpAddress: String!
  lastIpAddress: String!
  firebaseToken: String
  name: String!
  platform: String!
  ipAddressLock: Boolean!
  logoutAt: DateTime
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  registeredWithMasterAt: DateTime
  lastSyncAt: DateTime
  lastUnlockAt: DateTime
  lastLockAt: DateTime
  masterPasswordOutdatedAt: DateTime
  userId: String!
  markAsSynced: DateTime!
  reportSecretUsageEvent(
    webInputId: PositiveInt!
    secretId: UUID!
    kind: String!
  ): SecretUsageEventGQLScalars!
  updateDeviceSettings(
    vaultLockTimeoutSeconds: Int!
    syncTOTP: Boolean!
  ): DeviceGQL!
  rename(name: String!): DeviceGQL!
  logout: DeviceGQL!

  """
  user has to approve it when they log in again on that device
  """
  removeDevice: Boolean!
}

type SecretUsageEventGQLScalars {
  id: BigInt!
  kind: String!
  timestamp: DateTime!
  secretId: String!
  url: String
  userId: String!
  deviceId: String!
  webInputId: Int
}

"""
Integers that will have a value greater than 0.
"""
scalar PositiveInt

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

type DefaultDeviceSettingsMutation {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  theme: String!
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  userId: String!
  update(config: DefaultSettingsInput!): DefaultDeviceSettingsGQLScalars!
}

type DefaultDeviceSettingsGQLScalars {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  theme: String!
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  userId: String!
}

input DefaultSettingsInput {
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  uiLanguage: String!
  theme: String!
}

input DeviceInput {
  id: String!
  name: String!
  platform: String!
}

type EncryptedSecretMutation {
  id: ID!
  encrypted: String!
  version: Int!
  kind: EncryptedSecretType!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
  user: UserGQL!
  SecretUsageEvent: [SecretUsageEventGQL!]!
  lastUsedAt: DateTime
  update(patch: EncryptedSecretInput!): EncryptedSecretGQL!
  delete: EncryptedSecretGQL!
}

input EncryptedSecretInput {
  kind: EncryptedSecretType!
  encrypted: String!
}

input SecretUsageEventInput {
  kind: String!
  secretId: String!
  url: String
}

input SettingsInput {
  syncTOTP: Boolean!
  vaultLockTimeoutSeconds: Int!
  autofillCredentialsEnabled: Boolean!
  autofillTOTPEnabled: Boolean!
  uiLanguage: String!
  notificationOnVaultUnlock: Boolean!
  notificationOnWrongPasswordAttempts: Int!
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

input ChangeMasterPasswordInput {
  secrets: [EncryptedSecretPatchInput!]!
  addDeviceSecret: NonEmptyString!
  addDeviceSecretEncrypted: NonEmptyString!
  decryptionChallengeId: PositiveInt!
}

input EncryptedSecretPatchInput {
  kind: EncryptedSecretType!
  encrypted: String!
  id: UUID!
}

"""
A string that cannot be passed as an empty value
"""
scalar NonEmptyString

type DecryptionChallengeMutation {
  id: Int!
  ipAddress: String!
  approvedAt: DateTime
  rejectedAt: DateTime
  blockIp: Boolean
  deviceName: String!
  deviceId: String!
  userId: String!
  createdAt: DateTime!
  approvedByRecovery: Boolean!
  approvedFromDeviceId: String
  user: UserGQL!
  approvedFromDevice: DeviceGQL
  User: [UserGQL!]!
  approve: DecryptionChallengeGQL!
  reject: DecryptionChallengeGQL!
  recoverAccount: DecryptionChallengeGQL!
}

type LoginResponse {
  accessToken: String!
  user: UserMutation!
  encryptionSalt: String!
}

input RegisterNewAccountInput {
  firebaseToken: String!
  addDeviceSecret: NonEmptyString!
  addDeviceSecretEncrypted: NonEmptyString!
  encryptionSalt: NonEmptyString!
  devicePlatform: String!
  deviceId: ID!
  deviceName: String!
  email: EmailAddress!
}

union DecryptionChallenge =
  | DecryptionChallengeApproved
  | DecryptionChallengeForApproval

type DecryptionChallengeApproved {
  id: Int!
  ipAddress: String!
  approvedAt: DateTime
  rejectedAt: DateTime
  blockIp: Boolean
  deviceName: String!
  deviceId: String!
  userId: String!
  createdAt: DateTime!
  approvedByRecovery: Boolean!
  approvedFromDeviceId: String
  user: UserGQL!
  approvedFromDevice: DeviceGQL
  User: [UserGQL!]!
  addDeviceSecretEncrypted: String!
  encryptionSalt: String!
  addNewDeviceForUser(
    currentAddDeviceSecret: NonEmptyString!
    input: AddNewDeviceInput!
  ): LoginResponse!
}

input AddNewDeviceInput {
  firebaseToken: String!
  addDeviceSecret: NonEmptyString!
  addDeviceSecretEncrypted: NonEmptyString!
  encryptionSalt: NonEmptyString!
  devicePlatform: String!
}

input WebInputElement {
  domPath: String!

  """
  The index of the input element on the page (0-based). We are not able to always generate a css selector which matches only one element. Here the domOrdinal comes in and saves the day.
  """
  domOrdinal: NonNegativeInt!
  url: String!
  kind: WebInputType!
}
