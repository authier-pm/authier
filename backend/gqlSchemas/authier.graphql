type Query {
  user(userId: String!): UserQuery!

  """you need to be authenticated to call this resolver"""
  authenticated: Boolean!
  me: UserQuery
  sendAuthMessage(pageName: String!, device: String!, time: String!, location: String!, userId: String!): Boolean!
  sendConfirmation(success: Boolean!, userId: String!): Boolean!
}

type UserQuery {
  id: String!
  email: String
  phone_number: String
  account_name: String
  password: String!
  tokenVersion: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  masterDeviceId: Int
  myDevices: [Device!]!
  devicesCount: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Device {
  id: Int!
  firstIpAddress: String!
  lastIpAddress: String!
  firebaseToken: String!
  name: String!
  vaultLockTimeoutSeconds: Int
  createdAt: DateTime!
  updatedAt: DateTime
  registeredWithMasterAt: DateTime
  userId: String!
}

type Mutation {
  user(userId: String!): UserMutation!

  """you need to be authenticated to call this resolver"""
  me: UserMutation!
  addDevice(firebaseToken: String!, userId: String!, name: String!): Device!
  addOTPEvent(data: OTPEvent!): Boolean!
  register(firebaseToken: String!, password: String!, email: String!): LoginResponse!
  revokeRefreshTokensForUser(userId: String!): Boolean!
  login(password: String!, email: String!): LoginResponse
}

type UserMutation {
  id: String!
  email: String
  phone_number: String
  account_name: String
  password: String!
  tokenVersion: Int!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  masterDeviceId: Int
  addDevice(firebaseToken: String!, name: String!): Device!
  saveAuths(payload: String!): EncryptedSecrets!
  savePasswords(payload: String!): EncryptedSecrets!
  updateFireToken(firebaseToken: String!): Device!
}

type EncryptedSecrets {
  id: Int!
  encrypted: String!
  version: Int!
  userId: String!
  kind: EncryptedSecretsType!
  createdAt: DateTime!
  updatedAt: DateTime
}

enum EncryptedSecretsType {
  TOTP
  LOGIN_CREDENTIALS
}

input OTPEvent {
  kind: String!
  url: String!
  userId: String!
}

type LoginResponse {
  accessToken: String!
  secrets: [EncryptedSecrets!]
}
