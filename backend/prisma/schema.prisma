datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")

}

generator client {
    provider = "prisma-client-js"
    //previewFeatures = ["nApi"]
}

model EncryptedAuths {
    id        Int    @id @default(autoincrement())
    encrypted String @db.Text
    version   Int

    User   User   @relation(fields: [userId], references: [id])
    userId String @db.Uuid

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model Device {
    id                Int                 @id @default(autoincrement())
    firstIpAdress     String              @db.Inet
    lastIpAdress      String              @db.Inet
    name              String
    isMaster          Boolean
    User              User                @relation(fields: [userId], references: [id])
    userId            String              @db.Uuid
    createdAt         DateTime            @default(now())
    updatedAt         DateTime?           @updatedAt
    VaultUnlockEvents VaultUnlockEvents[]
}

model VaultUnlockEvents {
    id             Int       @id @default(autoincrement())
    ip             String    @db.Inet
    deviceId       Int
    device         Device    @relation(fields: [deviceId], references: [id])
    approvedAt     DateTime?
    approvedFromIp String    @db.Inet
}

model OTPCodeEvent {
    id            BigInt       @id @default(autoincrement())
    kind          String
    timestamp     DateTime     @default(now())
    ipAdress      String       @db.Inet
    url           String       @db.VarChar(2048)
    User          User         @relation(fields: [userId], references: [id])
    userId        String       @db.Uuid
    webOTPInputId Int?
    WebOTPInput   WebOTPInput? @relation(fields: [webOTPInputId], references: [id])
}

model WebOTPInput {
    id              Int            @id @default(autoincrement())
    kind            String
    createdAt       DateTime       @default(now())
    url             String         @db.VarChar(2048)
    domPath         String
    createdByUser   User           @relation(fields: [createdByUserId], references: [id])
    createdByUserId String         @db.Uuid
    OTPCodeEvent    OTPCodeEvent[]
}

model User {
    id           String          @id @default(uuid()) @db.Uuid
    email        String?         @unique
    phone_number String?         @unique
    account_name String?         @unique
    password     String
    tokenVersion Int             @default(0)
    name         String?
    auths        EncryptedAuths?
    Token        Token[]
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    OTPCodeEvent OTPCodeEvent[]
    Device       Device[]
    WebOTPInput  WebOTPInput[]
}

model Token {
    id         Int       @id @default(autoincrement())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    type       TokenType
    emailToken String?   @unique // Only used for short lived email tokens
    valid      Boolean   @default(true)
    expiration DateTime

    // Relation fields
    user   User   @relation(fields: [userId], references: [id])
    userId String @db.Uuid
}

enum TokenType {
    EMAIL // used as a short-lived token sent to the user's email
    API
}
